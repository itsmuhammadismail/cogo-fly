# Generated by Django 3.0.6 on 2021-03-02 13:31

import autoslug.fields
import cities_light.abstract_models
import cities_light.validators
import cogofly.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('notification_frequency', models.IntegerField(choices=[(0, 'never'), (1, 'daily'), (2, 'weekly'), (3, 'monthly')], default=0)),
                ('contacts', models.ManyToManyField(related_name='_user_contacts_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('views', models.ManyToManyField(related_name='visits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', cogofly.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('display_name', models.CharField(max_length=200)),
                ('search_names', cities_light.abstract_models.ToSearchTextField(blank=True, db_index=True, default='', max_length=4000)),
                ('latitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=5, max_digits=8, null=True)),
                ('population', models.BigIntegerField(blank=True, db_index=True, null=True)),
                ('feature_code', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('timezone', models.CharField(blank=True, db_index=True, max_length=40, null=True, validators=[cities_light.validators.timezone_validator])),
                ('picture', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'cities',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('code2', models.CharField(blank=True, max_length=2, null=True, unique=True)),
                ('code3', models.CharField(blank=True, max_length=3, null=True, unique=True)),
                ('continent', models.CharField(choices=[('OC', 'Oceania'), ('EU', 'Europe'), ('AF', 'Africa'), ('NA', 'North America'), ('AN', 'Antarctica'), ('SA', 'South America'), ('AS', 'Asia')], db_index=True, max_length=2)),
                ('tld', models.CharField(blank=True, db_index=True, max_length=5)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'countries',
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(verbose_name='Departure date')),
                ('end', models.DateField(verbose_name='Return date')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('departure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='cogofly.City')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trips', to='cogofly.City')),
                ('members', models.ManyToManyField(related_name='trips', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='own_trips', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['start', 'end'],
            },
        ),
        migrations.CreateModel(
            name='TripRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(blank=True, max_length=200)),
                ('confirmations', models.ManyToManyField(related_name='_triprequest_confirmations_+', to=settings.AUTH_USER_MODEL)),
                ('trip', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='cogofly.Trip')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Testimony',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('accepted', models.BooleanField(default=False)),
                ('text', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='testimony', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Testimonies',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('start', models.DateField(blank=True, null=True, verbose_name='date of departure')),
                ('end', models.DateField(blank=True, null=True, verbose_name='return date')),
                ('language', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'العربيّة'), ('az', 'Azərbaycanca'), ('be', 'Беларуская'), ('bg', 'Български'), ('bn', 'বাংলা'), ('br', 'Brezhoneg'), ('bs', 'Bosanski'), ('ca', 'Català'), ('cs', 'Česky'), ('cy', 'Cymraeg'), ('da', 'Dansk'), ('de', 'Deutsch'), ('el', 'Ελληνικά'), ('en', 'English'), ('eo', 'Esperanto'), ('es', 'Español'), ('et', 'Eesti'), ('eu', 'Basque'), ('fa', 'فارسی'), ('fi', 'Suomi'), ('fr', 'Français'), ('fy', 'Frysk'), ('ga', 'Gaeilge'), ('gd', 'Gàidhlig'), ('gl', 'Galego'), ('he', 'עברית'), ('hi', 'हिंदी'), ('hr', 'Hrvatski'), ('hu', 'Magyar'), ('hy', 'Հայերեն'), ('ia', 'Interlingua'), ('io', 'Ido'), ('id', 'Bahasa indonesia'), ('is', 'Íslenska'), ('it', 'Italiano'), ('ja', '日本語'), ('ka', 'ქართული'), ('kk', 'Қазақ'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', '한국어'), ('lb', 'Lëtzebuergesch'), ('lt', 'Lietuviškai'), ('lv', 'Latviešu'), ('mk', 'Македонски'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'मराठी'), ('my', 'မြန်မာဘာသာ'), ('nb', 'Norsk (bokmål)'), ('ne', 'नेपाली'), ('nl', 'Nederlands'), ('nn', 'Norsk (nynorsk)'), ('no', 'Norsk'), ('os', 'Ирон'), ('pa', 'Punjabi'), ('pl', 'Polski'), ('pt', 'Português'), ('ro', 'Română'), ('ru', 'Русский'), ('sk', 'Slovensky'), ('sl', 'Slovenščina'), ('sq', 'Shqip'), ('sr', 'Српски'), ('sv', 'Svenska'), ('sw', 'Kiswahili'), ('ta', 'தமிழ்'), ('te', 'తెలుగు'), ('th', 'ภาษาไทย'), ('tr', 'Türkçe'), ('tt', 'Татарча'), ('uk', 'Українська'), ('ur', 'اردو'), ('uz', 'Oʻzbek tili'), ('vi', 'Tiếng việt')], max_length=227, null=True, verbose_name='language')),
                ('nonsmoker', models.BooleanField(default=False, verbose_name='non-smokers only')),
                ('minage', models.IntegerField(blank=True, null=True, verbose_name='minimum age')),
                ('maxage', models.IntegerField(blank=True, null=True, verbose_name='maximum age')),
                ('sex', models.IntegerField(blank=True, choices=[(0, 'Female'), (1, 'Male'), (2, 'Other')], null=True, verbose_name='Sex')),
                ('covid', models.BooleanField(default=False, verbose_name='COVID-19 vaccine')),
                ('level', models.IntegerField(blank=True, choices=[(0, 'Nursery school'), (1, 'Primary education'), (2, 'Lower secondary education'), (3, 'Upper secondary education'), (4, 'Post-secondary non-tertiary education'), (5, 'Short-cycle tertiary education'), (6, "Bachelor's Degree or equivalent level"), (7, "Master's Degree or equivalent level"), (8, 'Ph.D. or equivalent level'), (9, 'Other')], null=True, verbose_name='education level')),
                ('subjects', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Agriculture - Forestry - Fisheries'), (1, 'Arts - Humanities'), (2, 'Business - Administration - Law'), (3, 'Education'), (4, 'Engineering - Manufacturing - Construction'), (5, 'Health - Welfare'), (6, 'Informatics - Communication'), (7, 'Natural sciences - Mathematics - Statistics'), (8, 'Services'), (9, 'Social sciences - Journalism - Information'), (10, 'Other')], max_length=22, null=True, verbose_name='study subjects')),
                ('sector', models.IntegerField(blank=True, choices=[(0, 'Administration'), (1, 'Advice - Services - Sales'), (2, 'Aeronautics - Space - Defence - Navy - Armament'), (3, 'Art - Shows - Creation'), (4, 'Associations - Social'), (5, 'Audiovisual - Cinema'), (6, 'Audit - Accounting - Management - Finance'), (7, 'Automobile'), (8, 'Banking - Insurance'), (9, 'Building - Public maintenance'), (10, 'Civil Service'), (11, 'Commerce - Distribution'), (12, 'Consumer goods - Craft'), (13, 'Documentation - Library'), (14, 'Environment - Humanitarian work'), (15, 'Fairs - Trade fairs - Congresses'), (16, 'Fashion - Textiles'), (17, 'Food - Catering'), (18, 'Funeral Services'), (19, 'Hotel - Catering'), (20, 'Human Resources'), (21, 'IT - Web - Telecommunications - High-Tech'), (22, 'Industry - Sciences'), (23, 'Languages - Writing - Media'), (24, 'Maintenance - Security'), (25, 'Marketing - Communication - Advertising'), (26, 'Pharmaceuticals - Paramedical - Health - Medical'), (27, 'Politics'), (28, 'Printing - Editing - Books - Journalism'), (29, 'Psychology'), (30, 'Real Estate - Culture - Heritage'), (31, 'Sport'), (32, 'Teaching - Research - Law'), (33, 'Tourism'), (34, 'Transport - Logistics - Rail'), (35, 'Other')], null=True, verbose_name='activity sector')),
                ('job', models.IntegerField(blank=True, choices=[(0, 'Farmer'), (1, 'Craftsman'), (2, 'Artist'), (3, 'Manager'), (4, 'Driver'), (5, 'Chief Executive Officer'), (6, 'Clergyman'), (7, 'Independent retailer'), (8, 'Foreman, supervisor'), (9, 'Managing director'), (10, 'Employee'), (11, 'Student'), (12, 'Civil servant'), (13, 'Engineer'), (14, 'Primary schoolteacher'), (15, 'Labourer'), (16, 'Policeman or Soldier'), (17, 'Teacher'), (18, 'Self-employed profession'), (19, 'Pensioner'), (20, 'Sportsman'), (21, 'Technician'), (22, 'Undisclosed'), (23, 'Unemployed'), (24, 'Other')], null=True, verbose_name='job')),
                ('current', models.CharField(blank=True, max_length=40, verbose_name='current employer')),
                ('previous', models.CharField(blank=True, max_length=40, verbose_name='previous employer')),
                ('children', models.IntegerField(blank=True, null=True, verbose_name='number of children')),
                ('zodiac', models.IntegerField(blank=True, choices=[(0, 'Capricorn'), (1, 'Aquarius'), (2, 'Pisces'), (3, 'Aries'), (4, 'Taurus'), (5, 'Gemini'), (6, 'Cancer'), (7, 'Leo'), (8, 'Virgo'), (9, 'Libra'), (10, 'Scorpio'), (11, 'Sagittarius')], null=True, verbose_name='star sign')),
                ('personalities', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Adventurous'), (1, 'Calm'), (2, 'Considerate'), (3, 'Demanding'), (4, 'Funny'), (5, 'Generous'), (7, 'Proud'), (8, 'Reliable'), (9, 'Reserved'), (10, 'Sensitive'), (11, 'Shy'), (12, 'Sociable'), (13, 'Spontaneous'), (14, 'Other')], max_length=32, null=True, verbose_name='personalities')),
                ('hobbies', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Animals - Zoo - Nature'), (1, 'Antiques Fairs - Car boot sales'), (2, 'Art - Painting - Drawing'), (3, 'Cars - Motorbikes - Boats'), (4, 'Charity work'), (5, 'Cinema - Theatre'), (6, 'DIY - Gardening'), (7, 'Decoration'), (8, 'Events – Opera - Concerts'), (9, 'Exhibitions - Museums - Castles'), (10, 'Fairs'), (11, 'Games (cards/videos/roles)'), (12, 'Gastronomy - Oenology'), (13, 'History - Archaeology'), (14, 'Hunting - Fishing'), (15, 'IT - Web - Sciences'), (16, 'Philosophy - Sociology'), (17, 'Photography - Video'), (18, 'Poetry - Literature'), (19, 'Politics'), (20, 'Pool - Bowling'), (21, 'Restaurants - Picnics'), (22, 'Sea - Beach - Mountains - Skiing'), (23, 'Shopping'), (24, 'Song - Dance - Music'), (25, 'Sport'), (26, 'Television - Radio - Newspapers'), (27, 'Walking - Parks - Trade fairs'), (28, 'Weekends away'), (29, 'Writing - Reading'), (30, 'Other')], max_length=82, null=True, verbose_name='hobbies')),
                ('licenses', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Boat'), (1, 'Car'), (2, 'HGV'), (3, 'Helicopter'), (4, 'Plane'), (5, 'Motorbike'), (6, 'Other')], max_length=13, null=True, verbose_name='licenses')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='cogofly.Country', verbose_name='country')),
                ('departure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='cogofly.City', verbose_name='departure city')),
                ('destination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='cogofly.City', verbose_name='destination')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Remark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('text', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('name_ascii', models.CharField(blank=True, db_index=True, max_length=200)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name_ascii')),
                ('geoname_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('alternate_names', models.TextField(blank=True, default='', null=True)),
                ('display_name', models.CharField(max_length=200)),
                ('geoname_code', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogofly.Country')),
            ],
            options={
                'verbose_name': 'region/state',
                'verbose_name_plural': 'regions/states',
                'ordering': ['name'],
                'abstract': False,
                'unique_together': {('country', 'slug'), ('country', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address')),
                ('birthdate', models.DateField(verbose_name='date of birth')),
                ('sex', models.IntegerField(choices=[(0, 'Female'), (1, 'Male'), (2, 'Other')], verbose_name='sex')),
                ('mothertongue', models.CharField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'العربيّة'), ('az', 'Azərbaycanca'), ('be', 'Беларуская'), ('bg', 'Български'), ('bn', 'বাংলা'), ('br', 'Brezhoneg'), ('bs', 'Bosanski'), ('ca', 'Català'), ('cs', 'Česky'), ('cy', 'Cymraeg'), ('da', 'Dansk'), ('de', 'Deutsch'), ('el', 'Ελληνικά'), ('en', 'English'), ('eo', 'Esperanto'), ('es', 'Español'), ('et', 'Eesti'), ('eu', 'Basque'), ('fa', 'فارسی'), ('fi', 'Suomi'), ('fr', 'Français'), ('fy', 'Frysk'), ('ga', 'Gaeilge'), ('gd', 'Gàidhlig'), ('gl', 'Galego'), ('he', 'עברית'), ('hi', 'हिंदी'), ('hr', 'Hrvatski'), ('hu', 'Magyar'), ('hy', 'Հայերեն'), ('ia', 'Interlingua'), ('io', 'Ido'), ('id', 'Bahasa indonesia'), ('is', 'Íslenska'), ('it', 'Italiano'), ('ja', '日本語'), ('ka', 'ქართული'), ('kk', 'Қазақ'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', '한국어'), ('lb', 'Lëtzebuergesch'), ('lt', 'Lietuviškai'), ('lv', 'Latviešu'), ('mk', 'Македонски'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'मराठी'), ('my', 'မြန်မာဘာသာ'), ('nb', 'Norsk (bokmål)'), ('ne', 'नेपाली'), ('nl', 'Nederlands'), ('nn', 'Norsk (nynorsk)'), ('no', 'Norsk'), ('os', 'Ирон'), ('pa', 'Punjabi'), ('pl', 'Polski'), ('pt', 'Português'), ('ro', 'Română'), ('ru', 'Русский'), ('sk', 'Slovensky'), ('sl', 'Slovenščina'), ('sq', 'Shqip'), ('sr', 'Српски'), ('sv', 'Svenska'), ('sw', 'Kiswahili'), ('ta', 'தமிழ்'), ('te', 'తెలుగు'), ('th', 'ภาษาไทย'), ('tr', 'Türkçe'), ('tt', 'Татарча'), ('uk', 'Українська'), ('ur', 'اردو'), ('uz', 'Oʻzbek tili'), ('vi', 'Tiếng việt')], max_length=2, null=True, verbose_name='mothertongue')),
                ('languages', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'العربيّة'), ('az', 'Azərbaycanca'), ('be', 'Беларуская'), ('bg', 'Български'), ('bn', 'বাংলা'), ('br', 'Brezhoneg'), ('bs', 'Bosanski'), ('ca', 'Català'), ('cs', 'Česky'), ('cy', 'Cymraeg'), ('da', 'Dansk'), ('de', 'Deutsch'), ('el', 'Ελληνικά'), ('en', 'English'), ('eo', 'Esperanto'), ('es', 'Español'), ('et', 'Eesti'), ('eu', 'Basque'), ('fa', 'فارسی'), ('fi', 'Suomi'), ('fr', 'Français'), ('fy', 'Frysk'), ('ga', 'Gaeilge'), ('gd', 'Gàidhlig'), ('gl', 'Galego'), ('he', 'עברית'), ('hi', 'हिंदी'), ('hr', 'Hrvatski'), ('hu', 'Magyar'), ('hy', 'Հայերեն'), ('ia', 'Interlingua'), ('io', 'Ido'), ('id', 'Bahasa indonesia'), ('is', 'Íslenska'), ('it', 'Italiano'), ('ja', '日本語'), ('ka', 'ქართული'), ('kk', 'Қазақ'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', '한국어'), ('lb', 'Lëtzebuergesch'), ('lt', 'Lietuviškai'), ('lv', 'Latviešu'), ('mk', 'Македонски'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'मराठी'), ('my', 'မြန်မာဘာသာ'), ('nb', 'Norsk (bokmål)'), ('ne', 'नेपाली'), ('nl', 'Nederlands'), ('nn', 'Norsk (nynorsk)'), ('no', 'Norsk'), ('os', 'Ирон'), ('pa', 'Punjabi'), ('pl', 'Polski'), ('pt', 'Português'), ('ro', 'Română'), ('ru', 'Русский'), ('sk', 'Slovensky'), ('sl', 'Slovenščina'), ('sq', 'Shqip'), ('sr', 'Српски'), ('sv', 'Svenska'), ('sw', 'Kiswahili'), ('ta', 'தமிழ்'), ('te', 'తెలుగు'), ('th', 'ภาษาไทย'), ('tr', 'Türkçe'), ('tt', 'Татарча'), ('uk', 'Українська'), ('ur', 'اردو'), ('uz', 'Oʻzbek tili'), ('vi', 'Tiếng việt')], max_length=227, null=True, verbose_name='language')),
                ('level', models.IntegerField(blank=True, choices=[(0, 'Nursery school'), (1, 'Primary education'), (2, 'Lower secondary education'), (3, 'Upper secondary education'), (4, 'Post-secondary non-tertiary education'), (5, 'Short-cycle tertiary education'), (6, "Bachelor's Degree or equivalent level"), (7, "Master's Degree or equivalent level"), (8, 'Ph.D. or equivalent level'), (9, 'Other')], null=True, verbose_name='education level')),
                ('subjects', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Agriculture - Forestry - Fisheries'), (1, 'Arts - Humanities'), (2, 'Business - Administration - Law'), (3, 'Education'), (4, 'Engineering - Manufacturing - Construction'), (5, 'Health - Welfare'), (6, 'Informatics - Communication'), (7, 'Natural sciences - Mathematics - Statistics'), (8, 'Services'), (9, 'Social sciences - Journalism - Information'), (10, 'Other')], max_length=22, null=True, verbose_name='study subjects')),
                ('sector', models.IntegerField(blank=True, choices=[(0, 'Administration'), (1, 'Advice - Services - Sales'), (2, 'Aeronautics - Space - Defence - Navy - Armament'), (3, 'Art - Shows - Creation'), (4, 'Associations - Social'), (5, 'Audiovisual - Cinema'), (6, 'Audit - Accounting - Management - Finance'), (7, 'Automobile'), (8, 'Banking - Insurance'), (9, 'Building - Public maintenance'), (10, 'Civil Service'), (11, 'Commerce - Distribution'), (12, 'Consumer goods - Craft'), (13, 'Documentation - Library'), (14, 'Environment - Humanitarian work'), (15, 'Fairs - Trade fairs - Congresses'), (16, 'Fashion - Textiles'), (17, 'Food - Catering'), (18, 'Funeral Services'), (19, 'Hotel - Catering'), (20, 'Human Resources'), (21, 'IT - Web - Telecommunications - High-Tech'), (22, 'Industry - Sciences'), (23, 'Languages - Writing - Media'), (24, 'Maintenance - Security'), (25, 'Marketing - Communication - Advertising'), (26, 'Pharmaceuticals - Paramedical - Health - Medical'), (27, 'Politics'), (28, 'Printing - Editing - Books - Journalism'), (29, 'Psychology'), (30, 'Real Estate - Culture - Heritage'), (31, 'Sport'), (32, 'Teaching - Research - Law'), (33, 'Tourism'), (34, 'Transport - Logistics - Rail'), (35, 'Other')], null=True, verbose_name='activity sector')),
                ('job', models.IntegerField(blank=True, choices=[(0, 'Farmer'), (1, 'Craftsman'), (2, 'Artist'), (3, 'Manager'), (4, 'Driver'), (5, 'Chief Executive Officer'), (6, 'Clergyman'), (7, 'Independent retailer'), (8, 'Foreman, supervisor'), (9, 'Managing director'), (10, 'Employee'), (11, 'Student'), (12, 'Civil servant'), (13, 'Engineer'), (14, 'Primary schoolteacher'), (15, 'Labourer'), (16, 'Policeman or Soldier'), (17, 'Teacher'), (18, 'Self-employed profession'), (19, 'Pensioner'), (20, 'Sportsman'), (21, 'Technician'), (22, 'Undisclosed'), (23, 'Unemployed'), (24, 'Other')], null=True, verbose_name='job')),
                ('current', models.IntegerField(blank=True, choices=[(0, '85C Bakery Cafe\n'), (1, '3M\n'), (2, '7-Eleven\n'), (3, '4F\n'), (4, '21st Century Fox\n'), (5, 'Ajinomoto\n'), (6, 'ABN AMRO\n'), (7, 'Accenture\n'), (8, 'AccorHotels\n'), (9, 'Acer Inc.\n'), (10, 'Activision Blizzard\n'), (11, 'Acumen\n'), (12, 'Adidas\n'), (13, 'Aldi\n'), (14, 'Aditi Technologies\n'), (15, 'Aditya Birla Group\n'), (16, 'Advanced Micro Devices\n'), (17, 'Aegon\n'), (18, 'AEON\n'), (19, 'Ahold Delhaize\n'), (20, 'Asics\n'), (21, 'Airbus\n'), (22, 'Aitken Spence\n'), (23, 'AkzoNobel\n'), (24, 'Alcatel-Lucent\n'), (25, 'Alfa Laval\n'), (26, 'All Nippon Airways\n'), (27, 'Alliance Global Group Inc.\n'), (28, 'Allianz\n'), (29, 'Alibaba Group\n'), (30, 'Almarai\n'), (31, 'Alstom\n'), (32, 'Altice\n'), (33, 'Altria Group\n'), (34, 'Amazon\n'), (35, 'American Airlines\n'), (36, 'American International Group\n'), (37, 'Andritz AG\n'), (38, 'Aon\n'), (39, 'Apollo Tyres\n'), (40, "Applebee's\n"), (41, 'Apple\n'), (42, 'Arcor\n'), (43, 'Assicurazioni Generali\n'), (44, 'Aston Martin\n'), (45, 'Asus\n'), (46, 'AT&amp;T\n'), (47, 'Atari\n'), (48, 'Avast\n'), (49, 'Avianca\n'), (50, 'AXA\n'), (51, 'Axiata Group\n'), (52, 'Axis Bank Ltd\n'), (53, 'BP\n'), (54, 'Bacardi\n'), (55, 'Banco Bilbao Vizcaya Argentaria\n'), (56, 'Banco Santander\n'), (57, 'Bank of India\n'), (58, 'Bank of Ireland\n'), (59, 'Bank of Montreal\n'), (60, 'Barclays\n'), (61, 'Barilla\n'), (62, 'Barrick Gold Corporation\n'), (63, 'BASF\n'), (64, 'Baskin-Robbins\n'), (65, 'Bata\n'), (66, 'Baidu\n'), (67, 'Bayer\n'), (68, 'Becton Dickinson\n'), (69, 'Beko\n'), (70, 'Benetton Group\n'), (71, "Ben &amp; Jerry's\n"), (72, 'Best Buy\n'), (73, 'Bharti Airtel\n'), (74, 'Bharti Enterprises\n'), (75, 'Bihl\n'), (76, 'Billabong\n'), (77, 'Billabong\n'), (78, 'Black &amp; Decker\n'), (79, 'Bliss Point Group (Business Consulting)\n'), (80, 'BMW\n'), (81, 'BBK Electronics\n'), (82, 'BBC\n'), (83, 'BNP Paribas\n'), (84, 'Bose Corporation\n'), (85, 'Boeing\n'), (86, 'Bombardier Inc.\n'), (87, 'Bouygues\n'), (88, 'BRAC\n'), (89, 'Braun\n'), (90, 'Bridgestone\n'), (91, 'British Airways\n'), (92, 'British Petroleum\n'), (93, 'Burberry\n'), (94, 'BT Group\n'), (95, 'Burger King\n'), (96, 'ByteDance\n'), (97, 'BYD\n'), (98, 'Cadbury\n'), (99, 'Capcom\n'), (100, 'Canon Inc\n'), (101, 'Capgemini\n'), (102, 'Casio\n'), (103, 'Capital One\n'), (104, 'Cargill\n'), (105, 'Cargolux\n'), (106, 'Caribbean Airlines\n'), (107, 'Carlsberg Group\n'), (108, 'Caterpillar Inc.\n'), (109, 'Celestica\n'), (110, 'Chatime\n'), (111, 'Chupa Chups\n'), (112, 'China Mobile\n'), (113, 'Changhong\n'), (114, 'Chanel\n'), (115, 'Chiquita Brands International\n'), (116, 'Chevron\n'), (117, 'China Merchants Bank\n'), (118, 'CIMC\n'), (119, 'Cisco Systems\n'), (120, 'Citigroup\n'), (121, 'The Coca-Cola Company\n'), (122, 'The Coffee Bean &amp; Tea Leaf\n'), (123, 'Cognizant Technology Solutions\n'), (124, 'Colgate-Palmolive Company\n'), (125, 'Comac\n'), (126, 'Concentrix\n'), (127, 'ConocoPhillips\n'), (128, 'Costco\n'), (129, 'Coty inc\n'), (130, 'Creative Labs\n'), (131, 'Crédit Agricole\n'), (132, 'Crocs\n'), (133, 'Credit Suisse\n'), (134, 'Cummins\n'), (135, 'Cyient\n'), (136, 'D-Link\n'), (137, 'Dabur\n'), (138, 'Daikin\n'), (139, 'Daimler AG\n'), (140, 'Daihatsu\n'), (141, 'Danone\n'), (142, 'Decathlon\n'), (143, 'Dell\n'), (144, 'Deloitte\n'), (145, 'Delta Air Lines\n'), (146, 'Deutsche Bank\n'), (147, 'Deutsche Telekom\n'), (148, 'Diageo\n'), (149, 'Dimension Data\n'), (150, 'Disney\n'), (151, 'Dow Chemical\n'), (152, 'Dole Food Company\n'), (153, "Domino's Pizza\n"), (154, 'Dude Perfect\n'), (155, "Dunkin' Donuts\n"), (156, 'Durex\n'), (157, 'DXC Technology\n'), (158, 'Dyson\n'), (159, 'EBay\n'), (160, 'easyJet\n'), (161, '<li><a href="/wiki/%C3%89lectricit%C3%A9_de_France" class="mw-redirect" title="Électricité de France">Électricité de France</a> (EDF)</li>\n'), (162, 'Electrolux\n'), (163, 'Electronic Arts\n'), (164, 'Electronic Data Systems\n'), (165, 'Embraer\n'), (166, 'EMI\n'), (167, 'Emerson Electric\n'), (168, 'Enel\n'), (169, 'Eni\n'), (170, 'Epson\n'), (171, 'Ericsson\n'), (172, 'Estée Lauder Companies\n'), (173, 'Etisalat\n'), (174, 'Eva Air\n'), (175, 'Evergreen Marine\n'), (176, 'ExxonMobil\n'), (177, 'Ezaki Glico\n'), (178, 'EY\n'), (179, 'Facebook, Inc.\n'), (180, 'Faber-Castell\n'), (181, 'Fast Retailing\n'), (182, 'FCA Italy\n'), (183, 'FBT\n'), (184, 'FedEx Express\n'), (185, 'Ferrero\n'), (186, 'Fila\n'), (187, 'Fiat Automobiles\n'), (188, 'Ficosa\n'), (189, 'FIS\n'), (190, 'Fossil Group\n'), (191, 'Foxconn\n'), (192, 'Ford Motor Company\n'), (193, 'FPT Group\n'), (194, 'France Télécom\n'), (195, 'Fujifilm\n'), (196, 'Fujitsu\n'), (197, 'Future Group\n'), (198, 'First Vita Plus Marketing Corp\n'), (199, 'Gap Inc.\n'), (200, 'Garmin\n'), (201, 'Gazprom\n'), (202, 'General Electric\n'), (203, 'Gree Electric\n'), (204, 'Groupe PSA\n'), (205, 'General Mills\n'), (206, 'General Motors\n'), (207, 'Generali\n'), (208, 'Geeknet\n'), (209, 'Gerdau\n'), (210, 'Giant Bicycles\n'), (211, 'Gibson\n'), (212, 'Globe Telecom\n'), (213, 'Gucci\n'), (214, 'GungHo Online Entertainment\n'), (215, 'Guinness\n'), (216, 'Guess\n'), (217, 'Gillette\n'), (218, 'Glaxo Smith Kline\n'), (219, 'Geely\n'), (220, 'Goodyear Tire and Rubber Company\n'), (221, 'Google\n'), (222, 'GoDaddy\n'), (223, 'GoPro\n'), (224, 'Harley-Davidson\n'), (225, 'Hermès\n'), (226, 'Haier\n'), (227, 'Harrods\n'), (228, 'Häagen-Dazs\n'), (229, 'Haribo\n'), (230, 'Hard Rock Cafe\n'), (231, 'Halliburton\n'), (232, 'Hankook Tire\n'), (233, 'House Foods\n'), (234, 'Hartwall\n'), (235, 'H&amp;M\n'), (236, 'Hasbro\n'), (237, 'Hasee\n'), (238, 'HCL Technologies\n'), (239, 'Hearst Corporation\n'), (240, 'Heineken\n'), (241, 'Henkel\n'), (242, 'Hewlett Packard Enterprise\n'), (243, 'Hilti\n'), (244, 'Hindustan Computers Limited\n'), (245, 'Hitachi\n'), (246, 'Holden\n'), (247, 'Honda\n'), (248, 'Honeywell\n'), (249, 'HP Inc\n'), (250, 'HSBC\n'), (251, 'HTC\n'), (252, 'Huayi Brothers\n'), (253, 'Huawei\n'), (254, 'Hutchison Whampoa Limited\n'), (255, 'Hytera\n'), (256, 'Hyundai Motor Company\n'), (257, 'IBM\n'), (258, 'ICAP\n'), (259, 'Icelandair\n'), (260, 'ICICI Bank\n'), (261, 'Intracom\n'), (262, 'IKEA\n'), (263, 'Illinois Tool Works\n'), (264, 'Indesit\n'), (265, 'Indeed\n'), (266, 'Infosys\n'), (267, 'ING Group\n'), (268, 'Ingersoll Rand\n'), (269, 'Instagram\n'), (270, 'Indofood\n'), (271, 'Intel Corporation\n'), (272, 'Intesa Sanpaolo\n'), (273, 'Isuzu\n'), (274, 'Jelly Belly\n'), (275, 'Jeep\n'), (276, "Jack Daniel's\n"), (277, 'Jawa Moto\n'), (278, 'Japan Airlines\n'), (279, 'Jim Beam\n'), (280, 'Johannus\n'), (281, 'JBS S.A.\n'), (282, 'The J.M. Smucker Company\n'), (283, 'Jardine Matheson\n'), (284, 'JG Summit Holdings\n'), (285, 'Johnnie Walker\n'), (286, 'Johnson &amp; Johnson\n'), (287, 'Jollibee Foods Corporation\n'), (288, 'JPMorgan Chase &amp; Co.\n'), (289, 'JVCKenwood\n'), (290, 'JXD\n'), (291, 'KBC Bank\n'), (292, 'Kawasaki\n'), (293, 'Kappa\n'), (294, "Kellogg's\n"), (295, 'Kenya Airways\n'), (296, 'KFC\n'), (297, 'Kia Motors\n'), (298, 'Kikkoman\n'), (299, 'Kirin Company\n'), (300, 'Kimberly-Clark\n'), (301, 'Kingston Technology\n'), (302, 'Knorr\n'), (303, 'Komatsu Limited\n'), (304, 'Konami\n'), (305, 'Korg\n'), (306, 'Keumyoung Group\n'), (307, 'KPMG\n'), (308, 'Kraft Foods\n'), (309, 'Kraft Heinz\n'), (310, 'Krispy Kreme\n'), (311, 'Lactalis\n'), (312, 'Lacoste\n'), (313, 'Lagardère\n'), (314, 'Larsen &amp; Toubro\n'), (315, 'Levi Strauss &amp; Co.\n'), (316, 'Lear\n'), (317, 'Lindt &amp; Sprüngli\n'), (318, 'Lenovo\n'), (319, 'Leonardo\n'), (320, 'Leoni AG\n'), (321, 'Lexmark\n'), (322, 'LG Electronics\n'), (323, 'Lego\n'), (324, 'Linde\n'), (325, 'Lionbridge\n'), (326, 'LiuGong\n'), (327, 'Lockheed Martin\n'), (328, "L'Oréal\n"), (329, 'Lotte Group\n'), (330, 'Lukoil\n'), (331, 'Lupin\n'), (332, 'Luxgen\n'), (333, 'Luxottica\n'), (334, 'LyondellBasell Industries\n'), (335, 'MG Cars\n'), (336, 'Maggi\n'), (337, 'Mahindra Group\n'), (338, 'Mars, Incorporated\n'), (339, 'Maton\n'), (340, 'Marriott\n'), (341, 'Marshall Amplification\n'), (342, 'Martini &amp; Rossi\n'), (343, 'Maersk\n'), (344, "Mama Sita's Holding Company\n"), (345, 'Mamee Double-Decker\n'), (346, 'Mattel\n'), (347, 'Maxxis\n'), (348, 'McCain Foods\n'), (349, "McDonald's\n"), (350, 'MediaTek\n'), (351, 'Meiji Holdings\n'), (352, 'Meizu\n'), (353, 'Mercedes-AMG\n'), (354, 'Mercedes-Benz\n'), (355, 'Michelin\n'), (356, 'Micro-Star International\n'), (357, 'Micromax Informatics\n'), (358, 'Microsoft\n'), (359, 'Mizuno Corporation\n'), (360, 'Millipore Corporation\n'), (361, 'Mindgeek\n'), (362, 'Miniso\n'), (363, 'Mindtree\n'), (364, 'Mitsubishi Electric\n'), (365, 'Mobil\n'), (366, 'Morinaga &amp; Company\n'), (367, 'Monsanto Company\n'), (368, 'Mustek\n'), (369, 'Nagarro\n'), (370, "Nando's\n"), (371, 'Namco Bandai Holdings\n'), (372, 'New Balance\n'), (373, 'Nestlé\n'), (374, 'NEC\n'), (375, 'NetApp Inc.\n'), (376, 'Nike, Inc.\n'), (377, 'Nivea\n'), (378, 'Nikon\n'), (379, 'Nintendo\n'), (380, 'Nissan\n'), (381, 'Nokia\n'), (382, '<li><a href="/wiki/Norsk_Hydro" title="Norsk Hydro">Norsk Hydro</a> (ASA)</li>\n'), (383, 'Novartis\n'), (384, 'Olympus Corporation\n'), (385, 'Oknoplast\n'), (386, 'Ooredoo\n'), (387, 'Otobi\n'), (388, 'OfficeMax\n'), (389, 'Oracle Corporation\n'), (390, 'Orange S.A.\n'), (391, 'Pandora\n'), (392, 'Panasonic Corporation\n'), (393, 'Parrot\n'), (394, 'Puma\n'), (395, 'Parmalat\n'), (396, 'Paper Mate\n'), (397, 'Pepper Lunch\n'), (398, 'PepsiCo\n'), (399, 'Perficient\n'), (400, 'Petronas\n'), (401, 'Pernod Ricard\n'), (402, 'Penguin Random House\n'), (403, 'Petrovietnam\n'), (404, 'Pfizer\n'), (405, 'Philips\n'), (406, 'Ping An Bank\n'), (407, 'Ping An Insurance\n'), (408, 'Pioneer Corporation\n'), (409, 'Pirelli\n'), (410, 'Pilot')], null=True, verbose_name='current employer')),
                ('previous', models.IntegerField(blank=True, choices=[(0, '85C Bakery Cafe\n'), (1, '3M\n'), (2, '7-Eleven\n'), (3, '4F\n'), (4, '21st Century Fox\n'), (5, 'Ajinomoto\n'), (6, 'ABN AMRO\n'), (7, 'Accenture\n'), (8, 'AccorHotels\n'), (9, 'Acer Inc.\n'), (10, 'Activision Blizzard\n'), (11, 'Acumen\n'), (12, 'Adidas\n'), (13, 'Aldi\n'), (14, 'Aditi Technologies\n'), (15, 'Aditya Birla Group\n'), (16, 'Advanced Micro Devices\n'), (17, 'Aegon\n'), (18, 'AEON\n'), (19, 'Ahold Delhaize\n'), (20, 'Asics\n'), (21, 'Airbus\n'), (22, 'Aitken Spence\n'), (23, 'AkzoNobel\n'), (24, 'Alcatel-Lucent\n'), (25, 'Alfa Laval\n'), (26, 'All Nippon Airways\n'), (27, 'Alliance Global Group Inc.\n'), (28, 'Allianz\n'), (29, 'Alibaba Group\n'), (30, 'Almarai\n'), (31, 'Alstom\n'), (32, 'Altice\n'), (33, 'Altria Group\n'), (34, 'Amazon\n'), (35, 'American Airlines\n'), (36, 'American International Group\n'), (37, 'Andritz AG\n'), (38, 'Aon\n'), (39, 'Apollo Tyres\n'), (40, "Applebee's\n"), (41, 'Apple\n'), (42, 'Arcor\n'), (43, 'Assicurazioni Generali\n'), (44, 'Aston Martin\n'), (45, 'Asus\n'), (46, 'AT&amp;T\n'), (47, 'Atari\n'), (48, 'Avast\n'), (49, 'Avianca\n'), (50, 'AXA\n'), (51, 'Axiata Group\n'), (52, 'Axis Bank Ltd\n'), (53, 'BP\n'), (54, 'Bacardi\n'), (55, 'Banco Bilbao Vizcaya Argentaria\n'), (56, 'Banco Santander\n'), (57, 'Bank of India\n'), (58, 'Bank of Ireland\n'), (59, 'Bank of Montreal\n'), (60, 'Barclays\n'), (61, 'Barilla\n'), (62, 'Barrick Gold Corporation\n'), (63, 'BASF\n'), (64, 'Baskin-Robbins\n'), (65, 'Bata\n'), (66, 'Baidu\n'), (67, 'Bayer\n'), (68, 'Becton Dickinson\n'), (69, 'Beko\n'), (70, 'Benetton Group\n'), (71, "Ben &amp; Jerry's\n"), (72, 'Best Buy\n'), (73, 'Bharti Airtel\n'), (74, 'Bharti Enterprises\n'), (75, 'Bihl\n'), (76, 'Billabong\n'), (77, 'Billabong\n'), (78, 'Black &amp; Decker\n'), (79, 'Bliss Point Group (Business Consulting)\n'), (80, 'BMW\n'), (81, 'BBK Electronics\n'), (82, 'BBC\n'), (83, 'BNP Paribas\n'), (84, 'Bose Corporation\n'), (85, 'Boeing\n'), (86, 'Bombardier Inc.\n'), (87, 'Bouygues\n'), (88, 'BRAC\n'), (89, 'Braun\n'), (90, 'Bridgestone\n'), (91, 'British Airways\n'), (92, 'British Petroleum\n'), (93, 'Burberry\n'), (94, 'BT Group\n'), (95, 'Burger King\n'), (96, 'ByteDance\n'), (97, 'BYD\n'), (98, 'Cadbury\n'), (99, 'Capcom\n'), (100, 'Canon Inc\n'), (101, 'Capgemini\n'), (102, 'Casio\n'), (103, 'Capital One\n'), (104, 'Cargill\n'), (105, 'Cargolux\n'), (106, 'Caribbean Airlines\n'), (107, 'Carlsberg Group\n'), (108, 'Caterpillar Inc.\n'), (109, 'Celestica\n'), (110, 'Chatime\n'), (111, 'Chupa Chups\n'), (112, 'China Mobile\n'), (113, 'Changhong\n'), (114, 'Chanel\n'), (115, 'Chiquita Brands International\n'), (116, 'Chevron\n'), (117, 'China Merchants Bank\n'), (118, 'CIMC\n'), (119, 'Cisco Systems\n'), (120, 'Citigroup\n'), (121, 'The Coca-Cola Company\n'), (122, 'The Coffee Bean &amp; Tea Leaf\n'), (123, 'Cognizant Technology Solutions\n'), (124, 'Colgate-Palmolive Company\n'), (125, 'Comac\n'), (126, 'Concentrix\n'), (127, 'ConocoPhillips\n'), (128, 'Costco\n'), (129, 'Coty inc\n'), (130, 'Creative Labs\n'), (131, 'Crédit Agricole\n'), (132, 'Crocs\n'), (133, 'Credit Suisse\n'), (134, 'Cummins\n'), (135, 'Cyient\n'), (136, 'D-Link\n'), (137, 'Dabur\n'), (138, 'Daikin\n'), (139, 'Daimler AG\n'), (140, 'Daihatsu\n'), (141, 'Danone\n'), (142, 'Decathlon\n'), (143, 'Dell\n'), (144, 'Deloitte\n'), (145, 'Delta Air Lines\n'), (146, 'Deutsche Bank\n'), (147, 'Deutsche Telekom\n'), (148, 'Diageo\n'), (149, 'Dimension Data\n'), (150, 'Disney\n'), (151, 'Dow Chemical\n'), (152, 'Dole Food Company\n'), (153, "Domino's Pizza\n"), (154, 'Dude Perfect\n'), (155, "Dunkin' Donuts\n"), (156, 'Durex\n'), (157, 'DXC Technology\n'), (158, 'Dyson\n'), (159, 'EBay\n'), (160, 'easyJet\n'), (161, '<li><a href="/wiki/%C3%89lectricit%C3%A9_de_France" class="mw-redirect" title="Électricité de France">Électricité de France</a> (EDF)</li>\n'), (162, 'Electrolux\n'), (163, 'Electronic Arts\n'), (164, 'Electronic Data Systems\n'), (165, 'Embraer\n'), (166, 'EMI\n'), (167, 'Emerson Electric\n'), (168, 'Enel\n'), (169, 'Eni\n'), (170, 'Epson\n'), (171, 'Ericsson\n'), (172, 'Estée Lauder Companies\n'), (173, 'Etisalat\n'), (174, 'Eva Air\n'), (175, 'Evergreen Marine\n'), (176, 'ExxonMobil\n'), (177, 'Ezaki Glico\n'), (178, 'EY\n'), (179, 'Facebook, Inc.\n'), (180, 'Faber-Castell\n'), (181, 'Fast Retailing\n'), (182, 'FCA Italy\n'), (183, 'FBT\n'), (184, 'FedEx Express\n'), (185, 'Ferrero\n'), (186, 'Fila\n'), (187, 'Fiat Automobiles\n'), (188, 'Ficosa\n'), (189, 'FIS\n'), (190, 'Fossil Group\n'), (191, 'Foxconn\n'), (192, 'Ford Motor Company\n'), (193, 'FPT Group\n'), (194, 'France Télécom\n'), (195, 'Fujifilm\n'), (196, 'Fujitsu\n'), (197, 'Future Group\n'), (198, 'First Vita Plus Marketing Corp\n'), (199, 'Gap Inc.\n'), (200, 'Garmin\n'), (201, 'Gazprom\n'), (202, 'General Electric\n'), (203, 'Gree Electric\n'), (204, 'Groupe PSA\n'), (205, 'General Mills\n'), (206, 'General Motors\n'), (207, 'Generali\n'), (208, 'Geeknet\n'), (209, 'Gerdau\n'), (210, 'Giant Bicycles\n'), (211, 'Gibson\n'), (212, 'Globe Telecom\n'), (213, 'Gucci\n'), (214, 'GungHo Online Entertainment\n'), (215, 'Guinness\n'), (216, 'Guess\n'), (217, 'Gillette\n'), (218, 'Glaxo Smith Kline\n'), (219, 'Geely\n'), (220, 'Goodyear Tire and Rubber Company\n'), (221, 'Google\n'), (222, 'GoDaddy\n'), (223, 'GoPro\n'), (224, 'Harley-Davidson\n'), (225, 'Hermès\n'), (226, 'Haier\n'), (227, 'Harrods\n'), (228, 'Häagen-Dazs\n'), (229, 'Haribo\n'), (230, 'Hard Rock Cafe\n'), (231, 'Halliburton\n'), (232, 'Hankook Tire\n'), (233, 'House Foods\n'), (234, 'Hartwall\n'), (235, 'H&amp;M\n'), (236, 'Hasbro\n'), (237, 'Hasee\n'), (238, 'HCL Technologies\n'), (239, 'Hearst Corporation\n'), (240, 'Heineken\n'), (241, 'Henkel\n'), (242, 'Hewlett Packard Enterprise\n'), (243, 'Hilti\n'), (244, 'Hindustan Computers Limited\n'), (245, 'Hitachi\n'), (246, 'Holden\n'), (247, 'Honda\n'), (248, 'Honeywell\n'), (249, 'HP Inc\n'), (250, 'HSBC\n'), (251, 'HTC\n'), (252, 'Huayi Brothers\n'), (253, 'Huawei\n'), (254, 'Hutchison Whampoa Limited\n'), (255, 'Hytera\n'), (256, 'Hyundai Motor Company\n'), (257, 'IBM\n'), (258, 'ICAP\n'), (259, 'Icelandair\n'), (260, 'ICICI Bank\n'), (261, 'Intracom\n'), (262, 'IKEA\n'), (263, 'Illinois Tool Works\n'), (264, 'Indesit\n'), (265, 'Indeed\n'), (266, 'Infosys\n'), (267, 'ING Group\n'), (268, 'Ingersoll Rand\n'), (269, 'Instagram\n'), (270, 'Indofood\n'), (271, 'Intel Corporation\n'), (272, 'Intesa Sanpaolo\n'), (273, 'Isuzu\n'), (274, 'Jelly Belly\n'), (275, 'Jeep\n'), (276, "Jack Daniel's\n"), (277, 'Jawa Moto\n'), (278, 'Japan Airlines\n'), (279, 'Jim Beam\n'), (280, 'Johannus\n'), (281, 'JBS S.A.\n'), (282, 'The J.M. Smucker Company\n'), (283, 'Jardine Matheson\n'), (284, 'JG Summit Holdings\n'), (285, 'Johnnie Walker\n'), (286, 'Johnson &amp; Johnson\n'), (287, 'Jollibee Foods Corporation\n'), (288, 'JPMorgan Chase &amp; Co.\n'), (289, 'JVCKenwood\n'), (290, 'JXD\n'), (291, 'KBC Bank\n'), (292, 'Kawasaki\n'), (293, 'Kappa\n'), (294, "Kellogg's\n"), (295, 'Kenya Airways\n'), (296, 'KFC\n'), (297, 'Kia Motors\n'), (298, 'Kikkoman\n'), (299, 'Kirin Company\n'), (300, 'Kimberly-Clark\n'), (301, 'Kingston Technology\n'), (302, 'Knorr\n'), (303, 'Komatsu Limited\n'), (304, 'Konami\n'), (305, 'Korg\n'), (306, 'Keumyoung Group\n'), (307, 'KPMG\n'), (308, 'Kraft Foods\n'), (309, 'Kraft Heinz\n'), (310, 'Krispy Kreme\n'), (311, 'Lactalis\n'), (312, 'Lacoste\n'), (313, 'Lagardère\n'), (314, 'Larsen &amp; Toubro\n'), (315, 'Levi Strauss &amp; Co.\n'), (316, 'Lear\n'), (317, 'Lindt &amp; Sprüngli\n'), (318, 'Lenovo\n'), (319, 'Leonardo\n'), (320, 'Leoni AG\n'), (321, 'Lexmark\n'), (322, 'LG Electronics\n'), (323, 'Lego\n'), (324, 'Linde\n'), (325, 'Lionbridge\n'), (326, 'LiuGong\n'), (327, 'Lockheed Martin\n'), (328, "L'Oréal\n"), (329, 'Lotte Group\n'), (330, 'Lukoil\n'), (331, 'Lupin\n'), (332, 'Luxgen\n'), (333, 'Luxottica\n'), (334, 'LyondellBasell Industries\n'), (335, 'MG Cars\n'), (336, 'Maggi\n'), (337, 'Mahindra Group\n'), (338, 'Mars, Incorporated\n'), (339, 'Maton\n'), (340, 'Marriott\n'), (341, 'Marshall Amplification\n'), (342, 'Martini &amp; Rossi\n'), (343, 'Maersk\n'), (344, "Mama Sita's Holding Company\n"), (345, 'Mamee Double-Decker\n'), (346, 'Mattel\n'), (347, 'Maxxis\n'), (348, 'McCain Foods\n'), (349, "McDonald's\n"), (350, 'MediaTek\n'), (351, 'Meiji Holdings\n'), (352, 'Meizu\n'), (353, 'Mercedes-AMG\n'), (354, 'Mercedes-Benz\n'), (355, 'Michelin\n'), (356, 'Micro-Star International\n'), (357, 'Micromax Informatics\n'), (358, 'Microsoft\n'), (359, 'Mizuno Corporation\n'), (360, 'Millipore Corporation\n'), (361, 'Mindgeek\n'), (362, 'Miniso\n'), (363, 'Mindtree\n'), (364, 'Mitsubishi Electric\n'), (365, 'Mobil\n'), (366, 'Morinaga &amp; Company\n'), (367, 'Monsanto Company\n'), (368, 'Mustek\n'), (369, 'Nagarro\n'), (370, "Nando's\n"), (371, 'Namco Bandai Holdings\n'), (372, 'New Balance\n'), (373, 'Nestlé\n'), (374, 'NEC\n'), (375, 'NetApp Inc.\n'), (376, 'Nike, Inc.\n'), (377, 'Nivea\n'), (378, 'Nikon\n'), (379, 'Nintendo\n'), (380, 'Nissan\n'), (381, 'Nokia\n'), (382, '<li><a href="/wiki/Norsk_Hydro" title="Norsk Hydro">Norsk Hydro</a> (ASA)</li>\n'), (383, 'Novartis\n'), (384, 'Olympus Corporation\n'), (385, 'Oknoplast\n'), (386, 'Ooredoo\n'), (387, 'Otobi\n'), (388, 'OfficeMax\n'), (389, 'Oracle Corporation\n'), (390, 'Orange S.A.\n'), (391, 'Pandora\n'), (392, 'Panasonic Corporation\n'), (393, 'Parrot\n'), (394, 'Puma\n'), (395, 'Parmalat\n'), (396, 'Paper Mate\n'), (397, 'Pepper Lunch\n'), (398, 'PepsiCo\n'), (399, 'Perficient\n'), (400, 'Petronas\n'), (401, 'Pernod Ricard\n'), (402, 'Penguin Random House\n'), (403, 'Petrovietnam\n'), (404, 'Pfizer\n'), (405, 'Philips\n'), (406, 'Ping An Bank\n'), (407, 'Ping An Insurance\n'), (408, 'Pioneer Corporation\n'), (409, 'Pirelli\n'), (410, 'Pilot')], null=True, verbose_name='previous employer')),
                ('children', models.IntegerField(blank=True, null=True, verbose_name='number of children')),
                ('personalities', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Adventurous'), (1, 'Calm'), (2, 'Considerate'), (3, 'Demanding'), (4, 'Funny'), (5, 'Generous'), (7, 'Proud'), (8, 'Reliable'), (9, 'Reserved'), (10, 'Sensitive'), (11, 'Shy'), (12, 'Sociable'), (13, 'Spontaneous'), (14, 'Other')], max_length=32, null=True, verbose_name='personalities')),
                ('hobbies', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Animals - Zoo - Nature'), (1, 'Antiques Fairs - Car boot sales'), (2, 'Art - Painting - Drawing'), (3, 'Cars - Motorbikes - Boats'), (4, 'Charity work'), (5, 'Cinema - Theatre'), (6, 'DIY - Gardening'), (7, 'Decoration'), (8, 'Events – Opera - Concerts'), (9, 'Exhibitions - Museums - Castles'), (10, 'Fairs'), (11, 'Games (cards/videos/roles)'), (12, 'Gastronomy - Oenology'), (13, 'History - Archaeology'), (14, 'Hunting - Fishing'), (15, 'IT - Web - Sciences'), (16, 'Philosophy - Sociology'), (17, 'Photography - Video'), (18, 'Poetry - Literature'), (19, 'Politics'), (20, 'Pool - Bowling'), (21, 'Restaurants - Picnics'), (22, 'Sea - Beach - Mountains - Skiing'), (23, 'Shopping'), (24, 'Song - Dance - Music'), (25, 'Sport'), (26, 'Television - Radio - Newspapers'), (27, 'Walking - Parks - Trade fairs'), (28, 'Weekends away'), (29, 'Writing - Reading'), (30, 'Other')], max_length=82, null=True, verbose_name='hobbies')),
                ('licenses', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Boat'), (1, 'Car'), (2, 'HGV'), (3, 'Helicopter'), (4, 'Plane'), (5, 'Motorbike'), (6, 'Other')], max_length=13, null=True, verbose_name='licenses')),
                ('smoker', models.BooleanField(blank=True, null=True, verbose_name='smoker')),
                ('how', models.IntegerField(blank=True, choices=[(0, 'Facebook'), (1, 'Google'), (3, 'Twitter'), (4, 'Other social media'), (5, 'Flyers'), (6, 'Word of mouth')], null=True, verbose_name='how do you know CoGoFly ?')),
                ('about', models.TextField(blank=True, null=True, verbose_name='about you')),
                ('covid', models.BooleanField(blank=True, null=True, verbose_name='COVID-19 vaccine')),
                ('picture', models.ImageField(blank=True, upload_to=cogofly.models.get_random_path, verbose_name='profile picture')),
                ('cover', models.ImageField(blank=True, upload_to=cogofly.models.get_random_path, verbose_name='cover picture')),
                ('birthplace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogofly.City', verbose_name='place of birth')),
                ('nationality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogofly.Country', verbose_name='nationality')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='place', to='cogofly.City', verbose_name='place of living')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Privacy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthplace', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='birthplace')),
                ('nationality', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='nationality')),
                ('mothertongue', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='mothertongue')),
                ('languages', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='languages')),
                ('zodiac', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='zodiac')),
                ('level', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='level')),
                ('subjects', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='subjects')),
                ('sector', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='sector')),
                ('job', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='job')),
                ('current', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='current')),
                ('previous', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='previous')),
                ('children', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='children')),
                ('personalities', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='personalities')),
                ('hobbies', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='hobbies')),
                ('licenses', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='licenses')),
                ('smoker', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='smoker')),
                ('about', models.IntegerField(choices=[(0, 'Nobody'), (1, 'Friends only'), (2, 'Everybody')], default=0, verbose_name='about')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='privacy', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(verbose_name="what's on your mind ?")),
                ('object_id', models.PositiveIntegerField(null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published'],
            },
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(upload_to=cogofly.models.get_random_path)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now_add=True)),
                ('type', models.IntegerField(choices=[(0, ''), (1, ''), (2, ''), (3, ''), (4, '%(name)s has added a trip'), (5, '%(name)s has joined your trip'), (6, '%(name)s has joined a trip')])),
                ('read', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField()),
                ('text', models.CharField(max_length=200)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('text', models.CharField(max_length=200)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='cogofly.Conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='ConversationMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to='cogofly.Conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='conversation',
            name='trip',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cogofly.Trip'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='users',
            field=models.ManyToManyField(related_name='conversations', through='cogofly.ConversationMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ContactRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(blank=True, max_length=200)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField()),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='cogofly.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-published'],
            },
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cogofly.Country'),
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cogofly.Region'),
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.IntegerField(choices=[(0, 'Favorite'), (1, 'Like')])),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='city',
            unique_together={('region', 'name'), ('region', 'slug')},
        ),
    ]
